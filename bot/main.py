import os
import logging
import asyncio
import traceback
import psutil
import gc
import torch
from datetime import datetime
from telegram import Update
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from config import config
from database import db
from audio_processor import AudioProcessor
from vosk_recognizer import VoskRecognizer
from text_enhancer import text_enhancer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler(f'bot_log_{datetime.now().strftime("%Y%m%d")}.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
admin_sessions = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_languages = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
def log_error(error_type, error, update=None):
    """–î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫"""
    error_msg = f"‚ùå {error_type}: {error}"
    logger.error(error_msg)
    
    if update and hasattr(update, 'effective_user'):
        user_info = f"User: {update.effective_user.id} {update.effective_user.username}"
        logger.error(f"   {user_info}")
    
    logger.error(f"   Traceback: {traceback.format_exc()}")
    return error_msg

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∞–º—è—Ç–∏
def get_memory_usage():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø–∞–º—è—Ç–∏"""
    process = psutil.Process()
    memory_info = process.memory_info()
    return {
        'rss_mb': memory_info.rss / 1024 / 1024,
        'vms_mb': memory_info.vms / 1024 / 1024,
        'percent': process.memory_percent()
    }

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    if config.ADMIN_USER_ID == 0:
        return False  # –ê–¥–º–∏–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
    return user_id == config.ADMIN_USER_ID or admin_sessions.get(user_id, False)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_in_admin_mode(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è)"""
    return admin_sessions.get(user_id, False)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_language(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return user_languages.get(user_id, config.DEFAULT_LANGUAGE)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    try:
        log_error("Global error", context.error, update)
        
        if update and update.effective_message:
            error_text = (
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.\n"
                "üõ†Ô∏è –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω.\n"
                "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑."
            )
            await update.effective_message.reply_text(error_text)
            
    except Exception as e:
        logger.error(f"Error in error handler: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—è Vosk
try:
    recognizer = VoskRecognizer(config.VOSK_MODEL_PATHS)
    logger.info("‚úÖ –ú–æ–¥–µ–ª–∏ Vosk —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
    logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏: {recognizer.get_available_languages()}")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Vosk: {e}")
    recognizer = None

# –ö–æ–º–∞–Ω–¥–∞: /language
async def language_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞"""
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏ –≤ Vosk
    available_languages = recognizer.get_available_languages() if recognizer else ['ru']
    
    keyboard = []
    if 'ru' in available_languages:
        keyboard.append(["üá∑üá∫ –†—É—Å—Å–∫–∏–π"])
    if 'en' in available_languages:
        keyboard.append(["üá∫üá∏ English"])
    keyboard.append(["üîô –ù–∞–∑–∞–¥"])
    
    language_menu = {
        "keyboard": keyboard,
        "resize_keyboard": True
    }
    
    await update.message.reply_text(
        "üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:\n\n"
        "‚Ä¢ üá∑üá∫ –†—É—Å—Å–∫–∏–π - –¥–ª—è –ª–µ–∫—Ü–∏–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º\n"
        "‚Ä¢ üá∫üá∏ English - –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –ª–µ–∫—Ü–∏–π\n\n"
        "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —è–∑—ã–∫, –Ω–æ –≤—ã–±–æ—Ä –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ —è–∑—ã–∫–∞ —É–ª—É—á—à–∏—Ç —Ç–æ—á–Ω–æ—Å—Ç—å!",
        reply_markup=language_menu
    )

# –ö–æ–º–∞–Ω–¥–∞: /admin
async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–Ω–µ —Ä–µ–∂–∏–º!)
    if user.id != config.ADMIN_USER_ID and config.ADMIN_USER_ID != 0:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    if len(context.args) == 0:
        await update.message.reply_text(
            "üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
            "–ü—Ä–∏–º–µ—Ä: /admin –≤–∞—à_–ø–∞—Ä–æ–ª—å"
        )
        return
    
    password = context.args[0]
    if password != config.ADMIN_PASSWORD:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_sessions[user.id] = True
    db.add_admin_session(user.id)
    
    await update.message.reply_text(
        "üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!",
        reply_markup=config.ADMIN_MENU
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω-–º–µ–Ω—é
async def handle_admin_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user = update.effective_user
    
    if not is_admin(user.id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    text = update.message.text
    
    if text == "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        stats = db.get_global_stats()
        total_users, total_requests, total_size, total_duration = stats
        
        stats_text = (
            f"üìä –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}\n"
            f"‚Ä¢ –û–±—â–∏–π –æ–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö: {total_size / (1024*1024):.1f} –ú–ë\n"
            f"‚Ä¢ –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {total_duration / 60:.1f} –º–∏–Ω—É—Ç\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –∞–¥–º–∏–Ω–∞: {len(admin_sessions)}\n"
            f"‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏ Vosk: {', '.join(recognizer.get_available_languages()) if recognizer else '–ù–µ—Ç'}"
        )
        await update.message.reply_text(stats_text)
        
    elif text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
        users = db.get_all_users()
        if not users:
            await update.message.reply_text("üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
            return
        
        users_text = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        for i, user in enumerate(users[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 10
            user_id, username, first_name, last_name, requests, last_active = user
            users_text += f"{i}. {first_name} {last_name} (@{username})\n"
            users_text += f"   ID: {user_id}, –ó–∞–ø—Ä–æ—Å–æ–≤: {requests}\n"
            users_text += f"   –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_active}\n\n"
        
        if len(users) > 10:
            users_text += f"... –∏ –µ—â–µ {len(users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        
        await update.message.reply_text(users_text)
        
    elif text == "üìã –õ–æ–≥–∏":
        try:
            log_file = f'bot_log_{datetime.now().strftime("%Y%m%d")}.log'
            if os.path.exists(log_file):
                with open(log_file, 'r', encoding='utf-8') as f:
                    logs = f.read()[-4000:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 4000 —Å–∏–º–≤–æ–ª–æ–≤
                await update.message.reply_text(f"üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:\n\n```\n{logs}\n```", parse_mode='Markdown')
            else:
                await update.message.reply_text("üìã –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
            
    elif text == "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞":
        await update.message.reply_text("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞...")
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
        
    elif text == "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞":
        await update.message.reply_text("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        
    elif text == "üîô –ù–∞–∑–∞–¥":
        if user.id in admin_sessions:
            del admin_sessions[user.id]
            db.end_admin_session(user.id)
        await update.message.reply_text(
            "üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º",
            reply_markup=config.MAIN_MENU
        )
        
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω–∞")

# –ö–æ–º–∞–Ω–¥–∞: /start
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    db.add_user(user.id, user.username, user.first_name, user.last_name)
    
    welcome_text = (
        "üé§ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–∫—Å—Ç.\n\n"
        "üìù –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª, "
        "–∏ —è –ø—Ä–µ–æ–±—Ä–∞–∑—É—é –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é –ª–æ–∫–∞–ª—å–Ω–æ–π –Ω–µ–π—Ä–æ—Å–µ—Ç–∏!\n\n"
        "‚ö° –†–∞–±–æ—Ç–∞—é –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ñ—Ñ–ª–∞–π–Ω –∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!\n"
        "üåç –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —Ä—É—Å—Å–∫–∏–π –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫–∏\n"
        "‚ú® –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è—é –æ–ø–µ—á–∞—Ç–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è—é –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é!\n\n"
        "üìé –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 20 –ú–ë"
    )
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=config.MAIN_MENU
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:\n\n"
        "1. üé§ –û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "2. üìé –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –∞—É–¥–∏–æ—Ñ–∞–π–ª (MP3, OGG, WAV)\n"
        "3. ‚è≥ –ü–æ–¥–æ–∂–¥–∏ 10-60 —Å–µ–∫—É–Ω–¥\n"
        "4. üìù –ü–æ–ª—É—á–∏ —É–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –ø—É–Ω–∫—Ç—É–∞—Ü–∏–µ–π!\n\n"
        "‚ú® –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "‚Ä¢ ü§ñ –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—á–∞—Ç–æ–∫\n"
        "‚Ä¢ üìù –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–Ω–∫—Ç—É–∞—Ü–∏—è\n"
        "‚Ä¢ üåç –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä—É—Å—Å–∫–æ–≥–æ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ\n"
        "‚Ä¢ üß† –£–º–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n\n"
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: /stats\n"
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏: /settings\n"
        "üåç –Ø–∑—ã–∫: /language"
    )
    
    await update.message.reply_text(
        help_text,
        reply_markup=config.MAIN_MENU
    )

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
    user = update.effective_user
    stats = db.get_user_stats(user.id)
    
    if stats and stats[0] > 0:
        total_requests, total_size, total_duration = stats
        total_size_mb = total_size / (1024 * 1024) if total_size else 0
        total_minutes = total_duration / 60 if total_duration else 0
        
        stats_text = (
            f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}\n"
            f"‚Ä¢ –û–±—â–∏–π –æ–±—ä–µ–º –∞—É–¥–∏–æ: {total_size_mb:.1f} –ú–ë\n"
            f"‚Ä¢ –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {total_minutes:.1f} –º–∏–Ω—É—Ç\n\n"
            f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –±–æ—Ç–∞! üéâ"
        )
    else:
        stats_text = "üìä –í—ã –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –∞—É–¥–∏–æ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è."
    
    await update.message.reply_text(
        stats_text,
        reply_markup=config.MAIN_MENU
    )

async def settings_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings"""
    settings_text = (
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏:\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤\n"
        "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö\n"
        "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
        "‚Ä¢ –í—ã–±–æ—Ä —è–∑—ã–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è (/language)\n\n"
        "–ë–æ–ª—å—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ—è–≤–∏—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏! üöÄ"
    )
    
    await update.message.reply_text(
        settings_text,
        parse_mode='HTML',
        reply_markup=config.MAIN_MENU
    )

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–Ω–æ–ø–æ–∫)"""
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∞
    if is_in_admin_mode(user.id):
        await handle_admin_message(update, context)
        return
        
    text = update.message.text
    
    if text == "üé§ –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å":
        await update.message.reply_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è! üé§",
            reply_markup=config.MAIN_MENU
        )
    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await stats_command(update, context)
    elif text == "‚ùì –ü–æ–º–æ—â—å":
        await help_command(update, context)
    elif text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        await settings_command(update, context)
    elif text == "üåç –Ø–∑—ã–∫":
        await language_command(update, context)
    elif text == "üá∑üá∫ –†—É—Å—Å–∫–∏–π":
        user_languages[user.id] = 'ru'
        await update.message.reply_text(
            "‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π\n"
            "–¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç –ª—É—á—à–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å —Ä—É—Å—Å–∫—É—é —Ä–µ—á—å!",
            reply_markup=config.MAIN_MENU
        )
    elif text == "üá∫üá∏ English":
        user_languages[user.id] = 'en'
        await update.message.reply_text(
            "‚úÖ Language changed to English\n"
            "The bot will now better recognize English speech!",
            reply_markup=config.MAIN_MENU
        )
    elif text == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text(
            "üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=config.MAIN_MENU
        )
    else:
        await update.message.reply_text(
            "–ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=config.MAIN_MENU
        )

async def handle_audio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤"""
    user = update.effective_user
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∞ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ
    if is_in_admin_mode(user.id):
        await update.message.reply_text(
            "‚ùå –í —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.\n"
            "–ù–∞–∂–º–∏—Ç–µ 'üîô –ù–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º.",
            reply_markup=config.ADMIN_MENU
        )
        return

    # –ü–†–û–í–ï–†–ö–ê: –µ—Å—Ç—å –ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å
    if not recognizer:
        error_msg = "–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å Vosk –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
        log_error("Vosk not initialized", error_msg, update)
        await update.message.reply_text(
            "‚ùå –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.\n"
            "üõ†Ô∏è –í–µ–¥—É—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã.\n"
            "‚è≥ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return

    # –ü–†–û–í–ï–†–ö–ê: –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ Vosk
    available_languages = recognizer.get_available_languages()
    if not available_languages:
        error_msg = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π Vosk"
        log_error("No Vosk models available", error_msg, update)
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.\n"
            "üõ†Ô∏è –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω."
        )
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    memory_before = get_memory_usage()
    logger.info(f"–ü–∞–º—è—Ç—å –¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {memory_before['rss_mb']:.1f} MB")
    
    user = update.effective_user
    db.add_user(user.id, user.username, user.first_name, user.last_name)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    if update.message.voice:
        audio_file = update.message.voice
        file_type = "–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    elif update.message.audio:
        audio_file = update.message.audio
        file_type = "–∞—É–¥–∏–æ—Ñ–∞–π–ª"
    else:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    if audio_file.file_size > config.MAX_FILE_SIZE:
        await update.message.reply_text(
            f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {config.MAX_FILE_SIZE // (1024*1024)} –ú–ë"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_language = get_user_language(user.id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await update.message.reply_text(
        f"‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {file_type}...\n"
        f"üìè –†–∞–∑–º–µ—Ä: {audio_file.file_size // 1024} –ö–ë\n"
        f"üåç –Ø–∑—ã–∫: {user_language.upper()}\n"
        "–≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è..."
    )
    
    temp_audio_path = None
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ
        telegram_file = await audio_file.get_file()
        temp_audio_path = await AudioProcessor.process_telegram_audio(telegram_file)
        
        if not temp_audio_path:
            await processing_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ
        duration = AudioProcessor.get_audio_duration(temp_audio_path)
        
        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
        recognized_text = recognizer.recognize_audio(temp_audio_path, user_language)

        # –£–õ–£–ß–®–ê–ï–ú –¢–ï–ö–°–¢!
        if recognized_text and "–û—à–∏–±–∫–∞" not in recognized_text and "–ù–µ —É–¥–∞–ª–æ—Å—å" not in recognized_text:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                context_words = []  # –ø–æ–∫–∞ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
                
                # –£–ª—É—á—à–∞–µ–º —Ç–µ–∫—Å—Ç
                enhanced_text = text_enhancer.enhance_text(recognized_text, context_words)
                
                if enhanced_text and enhanced_text != recognized_text:
                    recognized_text = enhanced_text
                    logger.info("‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–ª—É—á—à–µ–Ω!")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°–¢–†–û–ö–ê)
        db.add_audio_request(user.id, audio_file.file_id, audio_file.file_size, duration, recognized_text)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        if recognized_text and "–û—à–∏–±–∫–∞" not in recognized_text and "–ù–µ —É–¥–∞–ª–æ—Å—å" not in recognized_text:
            response_text = (
                f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!\n"
                f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.1f} —Å–µ–∫\n"
                f"üìù –¢–µ–∫—Å—Ç:\n\n{recognized_text}"
            )
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram)
            if len(response_text) > 4000:
                parts = [response_text[i:i+4000] for i in range(0, len(response_text), 4000)]
                for part in parts:
                    await update.message.reply_text(part)
            else:
                await update.message.reply_text(response_text)
                
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –í–æ–∑–º–æ–∂–Ω–æ:\n"
                "‚Ä¢ –°–ª–∏—à–∫–æ–º —Ç–∏—Ö–∏–π –∑–≤—É–∫\n"
                "‚Ä¢ –§–æ–Ω–æ–≤–∞—è –º—É–∑—ã–∫–∞/—à—É–º\n"
                "‚Ä¢ –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫\n"
                "‚Ä¢ –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –≤ —Ç–∏—Ö–æ–º –º–µ—Å—Ç–µ —Å —á–µ—Ç–∫–æ–π –¥–∏–∫—Ü–∏–µ–π!"
            )
            
    except Exception as e:
        error_msg = log_error("Audio processing error", e, update)
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ.\n"
            "üõ†Ô∏è –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω.\n"
            "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ –µ—â–µ —Ä–∞–∑."
        )
        
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if temp_audio_path and os.path.exists(temp_audio_path):
            try:
                os.remove(temp_audio_path)
            except:
                pass
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        memory_after = get_memory_usage()
        logger.info(f"–ü–∞–º—è—Ç—å –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {memory_after['rss_mb']:.1f} MB")
        logger.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–∞–º—è—Ç–∏: {memory_after['rss_mb'] - memory_before['rss_mb']:.1f} MB")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        try:
            await processing_msg.delete()
        except:
            pass

        torch.cuda.empty_cache() if torch.cuda.is_available() else None
        gc.collect()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        os.makedirs('temp', exist_ok=True)
        os.makedirs('logs', exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(config.TELEGRAM_BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("stats", stats_command))
        application.add_handler(CommandHandler("settings", settings_command))
        application.add_handler(CommandHandler("language", language_command))
        application.add_handler(CommandHandler("admin", admin_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
        application.add_handler(MessageHandler(filters.VOICE | filters.AUDIO, handle_audio))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)
        
        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏ Vosk: {recognizer.get_available_languages() if recognizer else '–ù–µ—Ç'}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        application.run_polling(allowed_updates=Update.ALL_TYPES)
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        logger.error(traceback.format_exc())

if __name__ == "__main__":
    main()