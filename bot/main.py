import os
import logging
import asyncio
import traceback
import psutil
import gc
import torch
from datetime import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from core.config import config
from core.database import db
from core.processing_queue import processing_queue
from core.cache_manager import cache_manager
from processors.audio_processor import AudioProcessor
from processors.vosk_recognizer import VoskRecognizer
from processors.text_enhancer import text_enhancer
from processors.plugin_system import plugin_system
from services.voice_synthesizer import voice_synthesizer
from services.backup_service import backup_service
from services.ab_testing import ab_testing
from utils.system_check import system_checker

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler(f'bot_log_{datetime.now().strftime("%Y%m%d")}.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
admin_sessions = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_languages = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
def log_error(error_type, error, update=None):
    """–î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫"""
    error_msg = f"‚ùå {error_type}: {error}"
    logger.error(error_msg)
    
    if update and hasattr(update, 'effective_user'):
        user_info = f"User: {update.effective_user.id} {update.effective_user.username}"
        logger.error(f"   {user_info}")
    
    logger.error(f"   Traceback: {traceback.format_exc()}")
    return error_msg

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    if config.ADMIN_USER_ID == 0:
        return False
    return user_id == config.ADMIN_USER_ID or admin_sessions.get(user_id, False)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_in_admin_mode(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return admin_sessions.get(user_id, False)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_language(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return user_languages.get(user_id, config.DEFAULT_LANGUAGE)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    try:
        log_error("Global error", context.error, update)
        
        if update and update.effective_message:
            error_text = (
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.\n"
                "üõ†Ô∏è –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω.\n"
                "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑."
            )
            await update.effective_message.reply_text(error_text)
            
    except Exception as e:
        logger.error(f"Error in error handler: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—è Vosk
try:
    recognizer = VoskRecognizer(config.VOSK_MODEL_PATHS)
    logger.info("‚úÖ –ú–æ–¥–µ–ª–∏ Vosk —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
    logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏: {recognizer.get_available_languages()}")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Vosk: {e}")
    recognizer = None

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
async def start_services():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã"""
    try:
        # –ó–∞–ø—É—Å–∫ –æ—á–µ—Ä–µ–¥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await processing_queue.start()
        logger.info("‚úÖ –û—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—É—â–µ–Ω–∞")
        
        # –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        if config.BACKUP_ENABLED:
            backup_service.start_auto_backup(config.BACKUP_INTERVAL_HOURS)
            logger.info("‚úÖ –°–µ—Ä–≤–∏—Å –±—ç–∫–∞–ø–æ–≤ –∑–∞–ø—É—â–µ–Ω")
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –∫—ç—à–∞
        deleted_count = cache_manager.clear_old_cache()
        if deleted_count > 0:
            logger.info(f"‚úÖ –û—á–∏—â–µ–Ω–æ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∫—ç—à-—Ñ–∞–π–ª–æ–≤: {deleted_count}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã
def check_system_requirements():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...")
    
    deps_status = system_checker.check_dependencies()
    system_info = system_checker.get_system_info()
    disk_space = system_checker.check_disk_space()
    
    logger.info(f"üíª –°–∏—Å—Ç–µ–º–∞: {system_info['system']} {system_info['release']}")
    logger.info(f"üêç Python: {system_info['python_version']}")
    
    if disk_space and 'free_gb' in disk_space:
        logger.info(f"üíæ –°–≤–æ–±–æ–¥–Ω–æ –º–µ—Å—Ç–∞: {disk_space['free_gb']} GB ({disk_space['free_percent']}%)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    missing_required = []
    for dep_name, status in deps_status.items():
        if status['required'] and not status['available']:
            missing_required.append(dep_name)
    
    if missing_required:
        logger.warning("‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
        for dep in missing_required:
            logger.warning(f"   - {dep}")
    else:
        logger.info("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
    
    return len(missing_required) == 0

# –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    db.add_user(user.id, user.username, user.first_name, user.last_name)
    
    welcome_text = (
        "üé§ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–∫—Å—Ç.\n\n"
        "üìù –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª, "
        "–∏ —è –ø—Ä–µ–æ–±—Ä–∞–∑—É—é –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é –ª–æ–∫–∞–ª—å–Ω–æ–π –Ω–µ–π—Ä–æ—Å–µ—Ç–∏!\n\n"
        "‚ö° –†–∞–±–æ—Ç–∞—é –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ñ—Ñ–ª–∞–π–Ω –∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!\n"
        "üåç –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —Ä—É—Å—Å–∫–∏–π –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫–∏\n"
        "‚ú® –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è—é –æ–ø–µ—á–∞—Ç–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è—é –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é!\n\n"
        "üìé –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 20 –ú–ë\n"
        "üé• –¢–∞–∫–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é –≤–∏–¥–µ–æ—Ñ–∞–π–ª—ã –∏ –∫—Ä—É–∂–æ—á–∫–∏!"
    )
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=config.MAIN_MENU
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:\n\n"
        "1. üé§ –û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "2. üìé –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –∞—É–¥–∏–æ—Ñ–∞–π–ª (MP3, OGG, WAV)\n"
        "3. üé• –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –≤–∏–¥–µ–æ—Ñ–∞–π–ª (MP4)\n"
        "4. ‚≠ï –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –∫—Ä—É–∂–æ—á–µ–∫ (video note)\n"
        "5. ‚è≥ –ü–æ–¥–æ–∂–¥–∏ 10-60 —Å–µ–∫—É–Ω–¥\n"
        "6. üìù –ü–æ–ª—É—á–∏ —É–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –ø—É–Ω–∫—Ç—É–∞—Ü–∏–µ–π!\n\n"
        "‚ú® –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "‚Ä¢ ü§ñ –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—á–∞—Ç–æ–∫\n"
        "‚Ä¢ üìù –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–Ω–∫—Ç—É–∞—Ü–∏—è\n"
        "‚Ä¢ üåç –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä—É—Å—Å–∫–æ–≥–æ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ\n"
        "‚Ä¢ üß† –£–º–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n\n"
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: /stats\n"
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏: /settings\n"
        "üåç –Ø–∑—ã–∫: /language"
    )
    
    await update.message.reply_text(
        help_text,
        reply_markup=config.MAIN_MENU
    )

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
    user = update.effective_user
    stats = db.get_user_stats(user.id)
    
    if stats and stats[0] > 0:
        total_requests, total_size, total_duration = stats
        total_size_mb = total_size / (1024 * 1024) if total_size else 0
        total_minutes = total_duration / 60 if total_duration else 0
        
        stats_text = (
            f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}\n"
            f"‚Ä¢ –û–±—â–∏–π –æ–±—ä–µ–º –∞—É–¥–∏–æ: {total_size_mb:.1f} –ú–ë\n"
            f"‚Ä¢ –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {total_minutes:.1f} –º–∏–Ω—É—Ç\n\n"
            f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –±–æ—Ç–∞! üéâ"
        )
    else:
        stats_text = "üìä –í—ã –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –∞—É–¥–∏–æ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è."
    
    await update.message.reply_text(
        stats_text,
        reply_markup=config.MAIN_MENU
    )

async def settings_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings"""
    settings_text = (
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏:\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤\n"
        "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö\n"
        "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
        "‚Ä¢ –í—ã–±–æ—Ä —è–∑—ã–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è (/language)\n\n"
        "–ë–æ–ª—å—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ—è–≤–∏—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏! üöÄ"
    )
    
    await update.message.reply_text(
        settings_text,
        parse_mode='HTML',
        reply_markup=config.MAIN_MENU
    )

async def language_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞"""
    user = update.effective_user
    
    available_languages = recognizer.get_available_languages() if recognizer else ['ru']
    
    keyboard = []
    if 'ru' in available_languages:
        keyboard.append(["üá∑üá∫ –†—É—Å—Å–∫–∏–π"])
    if 'en' in available_languages:
        keyboard.append(["üá∫üá∏ English"])
    keyboard.append(["üîô –ù–∞–∑–∞–¥"])
    
    language_menu = {
        "keyboard": keyboard,
        "resize_keyboard": True
    }
    
    await update.message.reply_text(
        "üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:\n\n"
        "‚Ä¢ üá∑üá∫ –†—É—Å—Å–∫–∏–π - –¥–ª—è –ª–µ–∫—Ü–∏–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º\n"
        "‚Ä¢ üá∫üá∏ English - –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –ª–µ–∫—Ü–∏–π\n\n"
        "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —è–∑—ã–∫, –Ω–æ –≤—ã–±–æ—Ä –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ —è–∑—ã–∫–∞ —É–ª—É—á—à–∏—Ç —Ç–æ—á–Ω–æ—Å—Ç—å!",
        reply_markup=language_menu
    )

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
    user = update.effective_user
    
    if user.id != config.ADMIN_USER_ID and config.ADMIN_USER_ID != 0:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    if len(context.args) == 0:
        await update.message.reply_text(
            "üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
            "–ü—Ä–∏–º–µ—Ä: /admin –≤–∞—à_–ø–∞—Ä–æ–ª—å"
        )
        return
    
    password = context.args[0]
    if password != config.ADMIN_PASSWORD:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    admin_sessions[user.id] = True
    db.add_admin_session(user.id)
    
    await update.message.reply_text(
        "üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!",
        reply_markup=config.ADMIN_MENU
    )

async def batch_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    help_text = (
        "üóÉÔ∏è *–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ "
        "–∏–ª–∏ ZIP-–∞—Ä—Ö–∏–≤ —Å —Ñ–∞–π–ª–∞–º–∏.\n\n"
        "–ë–æ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –∏ –ø—Ä–∏—à–ª–µ—Ç ZIP-–∞—Ä—Ö–∏–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏.\n\n"
        "üìé *–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:*\n"
        "‚Ä¢ –ê—É–¥–∏–æ: MP3, WAV, OGG, M4A\n"
        "‚Ä¢ –í–∏–¥–µ–æ: MP4, AVI, MOV\n"
        "‚Ä¢ –ê—Ä—Ö–∏–≤—ã: ZIP\n\n"
        "‚è±Ô∏è *–û–±—Ä–∞–±–æ—Ç–∫–∞:* –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è, –¥–æ 10 —Ñ–∞–π–ª–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ\n"
        "üíæ *–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä:* 50 –ú–ë –Ω–∞ –∞—Ä—Ö–∏–≤"
    )
    
    await update.message.reply_text(
        help_text,
        parse_mode='Markdown',
        reply_markup=config.MAIN_MENU
    )

async def voice_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"""
    if not context.args:
        await update.message.reply_text(
            "üîä *–û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞*\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/voice –≤–∞—à —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/voice –ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ`\n\n"
            "‚ö†Ô∏è *–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:*\n"
            "‚Ä¢ –î–æ 500 —Å–∏–º–≤–æ–ª–æ–≤\n"
            "‚Ä¢ –¢–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π\n"
            "‚Ä¢ MP3 —Ñ–æ—Ä–º–∞—Ç –Ω–∞ –≤—ã—Ö–æ–¥–µ",
            parse_mode='Markdown'
        )
        return
    
    text = ' '.join(context.args)
    
    if len(text) > 500:
        await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    processing_msg = await update.message.reply_text("üîä –û–∑–≤—É—á–∏–≤–∞—é —Ç–µ–∫—Å—Ç...")
    
    try:
        user_group = ab_testing.assign_group(update.effective_user.id, "voice_synthesis_method")
        audio_path = voice_synthesizer.text_to_speech(text)
        
        if audio_path:
            await update.message.reply_voice(
                voice=open(audio_path, 'rb'),
                caption=f"üìù –û–∑–≤—É—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text[:100]}..."
            )
            
            ab_testing.track_result(
                "voice_synthesis_method",
                update.effective_user.id,
                user_group,
                success=True,
                metrics={'text_length': len(text), 'audio_size': os.path.getsize(audio_path)}
            )
            
            os.unlink(audio_path)
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–∑–≤—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç")
            
            ab_testing.track_result(
                "voice_synthesis_method", 
                update.effective_user.id,
                user_group,
                success=False
            )
    
    except Exception as e:
        log_error("Voice synthesis error", e, update)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞")
    
    finally:
        try:
            await processing_msg.delete()
        except:
            pass

# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ú–ï–î–ò–ê–§–ê–ô–õ–û–í
async def handle_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–æ–≤"""
    await process_media(update, context, "video")

async def handle_video_note(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫—Ä—É–∂–æ—á–∫–æ–≤ (video notes)"""
    await process_media(update, context, "video_note")

async def process_media(update: Update, context: ContextTypes.DEFAULT_TYPE, media_type):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤"""
    user = update.effective_user
    
    if is_in_admin_mode(user.id):
        await update.message.reply_text(
            "‚ùå –í —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.",
            reply_markup=config.ADMIN_MENU
        )
        return

    if not recognizer:
        await update.message.reply_text("‚ùå –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
        return

    if media_type == "video":
        media_file = update.message.video
        file_type = "–≤–∏–¥–µ–æ—Ñ–∞–π–ª"
    elif media_type == "video_note":
        media_file = update.message.video_note
        file_type = "–∫—Ä—É–∂–æ—á–µ–∫"
    else:
        return

    if media_file.file_size > config.MAX_FILE_SIZE:
        await update.message.reply_text(
            f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {config.MAX_FILE_SIZE // (1024*1024)} –ú–ë"
        )
        return

    if media_type == "video" and media_file.duration > config.MAX_VIDEO_DURATION:
        await update.message.reply_text(
            f"‚ùå –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {config.MAX_VIDEO_DURATION // 60} –º–∏–Ω—É—Ç"
        )
        return

    user_language = get_user_language(user.id)

    processing_msg = await update.message.reply_text(
        f"‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {file_type}...\n"
        f"üìè –†–∞–∑–º–µ—Ä: {media_file.file_size // 1024} –ö–ë\n"
        f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {media_file.duration} —Å–µ–∫\n"
        f"üåç –Ø–∑—ã–∫: {user_language.upper()}\n"
        "–ò–∑–≤–ª–µ–∫–∞—é –∞—É–¥–∏–æ –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å..."
    )

    temp_audio_path = None
    try:
        telegram_file = await media_file.get_file()
        
        if media_type == "video":
            temp_audio_path = await AudioProcessor.process_telegram_video(telegram_file)
        elif media_type == "video_note":
            temp_audio_path = await AudioProcessor.process_telegram_video_note(telegram_file)

        if not temp_audio_path:
            await processing_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞")
            return

        recognized_text = recognizer.recognize_audio(temp_audio_path, user_language)

        if recognized_text and "–û—à–∏–±–∫–∞" not in recognized_text:
            try:
                enhanced_text = text_enhancer.enhance_text(recognized_text, [])
                if enhanced_text:
                    recognized_text = enhanced_text
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e}")

        db.add_audio_request(user.id, media_file.file_id, media_file.file_size, media_file.duration, recognized_text)

        if recognized_text and "–û—à–∏–±–∫–∞" not in recognized_text:
            response_text = (
                f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∏–∑ {file_type}!\n"
                f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {media_file.duration} —Å–µ–∫\n"
                f"üìù –¢–µ–∫—Å—Ç:\n\n{recognized_text}"
            )
            
            if len(response_text) > 4000:
                parts = [response_text[i:i+4000] for i in range(0, len(response_text), 4000)]
                for part in parts:
                    await update.message.reply_text(part)
            else:
                await update.message.reply_text(response_text)
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –∏–∑ –≤–∏–¥–µ–æ.")

    except Exception as e:
        error_msg = log_error(f"{media_type} processing error", e, update)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ.")

    finally:
        if temp_audio_path and os.path.exists(temp_audio_path):
            try:
                os.remove(temp_audio_path)
            except:
                pass
        
        try:
            await processing_msg.delete()
        except:
            pass

        torch.cuda.empty_cache() if torch.cuda.is_available() else None
        gc.collect()

# –û–ë–†–ê–ë–û–¢–ß–ò–ö –ê–î–ú–ò–ù-–ú–ï–ù–Æ
async def handle_admin_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user = update.effective_user
    
    if not is_admin(user.id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    text = update.message.text
    
    if text == "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        stats = db.get_global_stats()
        total_users, total_requests, total_size, total_duration = stats
        
        queue_stats = processing_queue.get_queue_stats()
        cache_stats = cache_manager.get_cache_stats()
        avg_rating, total_ratings = db.get_average_rating()
        
        stats_text = (
            f"üìä *–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n"
            f"‚Ä¢ üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"‚Ä¢ üì® –ó–∞–ø—Ä–æ—Å–æ–≤: {total_requests}\n"
            f"‚Ä¢ üíæ –û–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö: {total_size / (1024*1024):.1f} –ú–ë\n"
            f"‚Ä¢ ‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {total_duration / 60:.1f} –º–∏–Ω\n"
            f"‚Ä¢ ‚≠ê –†–µ–π—Ç–∏–Ω–≥: {avg_rating:.1f}/5 ({total_ratings} –æ—Ü–µ–Ω–æ–∫)\n\n"
            f"*–°–∏—Å—Ç–µ–º–∞:*\n"
            f"‚Ä¢ üéØ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {queue_stats['active_tasks']}\n"
            f"‚Ä¢ üí∞ –§–∞–π–ª–æ–≤ –≤ –∫—ç—à–µ: {cache_stats['total_files']}\n"
        )
        await update.message.reply_text(stats_text, parse_mode='Markdown')
        
    elif text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
        users = db.get_all_users()
        if not users:
            await update.message.reply_text("üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
            return
        
        users_text = "üë• *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n\n"
        for i, user in enumerate(users[:10], 1):
            user_id, username, first_name, last_name, requests, last_active = user
            users_text += f"{i}. {first_name} {last_name} (@{username})\n"
            users_text += f"   ID: {user_id}, –ó–∞–ø—Ä–æ—Å–æ–≤: {requests}\n"
            users_text += f"   –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_active}\n\n"
        
        if len(users) > 10:
            users_text += f"... –∏ –µ—â–µ {len(users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        
        await update.message.reply_text(users_text, parse_mode='Markdown')
        
    elif text == "üìã –õ–æ–≥–∏":
        try:
            log_file = f'bot_log_{datetime.now().strftime("%Y%m%d")}.log'
            if os.path.exists(log_file):
                with open(log_file, 'r', encoding='utf-8') as f:
                    logs = f.read()[-4000:]
                await update.message.reply_text(f"üìã *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:*\n\n```\n{logs}\n```", parse_mode='Markdown')
            else:
                await update.message.reply_text("üìã –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
            
    elif text == "üíæ –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø":
        await update.message.reply_text("üíæ –°–æ–∑–¥–∞—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é...")
        try:
            backup_path = backup_service.create_backup()
            if backup_path:
                await update.message.reply_document(
                    document=open(backup_path, 'rb'),
                    filename=os.path.basename(backup_path),
                    caption="‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
                )
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            
    elif text == "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞":
        await update.message.reply_text("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
        try:
            await start_services()
            await update.message.reply_text("‚úÖ –°–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã!")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            
    elif text == "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞":
        await update.message.reply_text("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        
    elif text == "üîô –ù–∞–∑–∞–¥":
        if user.id in admin_sessions:
            del admin_sessions[user.id]
            db.end_admin_session(user.id)
        await update.message.reply_text(
            "üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º",
            reply_markup=config.MAIN_MENU
        )
        
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω–∞")

# –û–ë–†–ê–ë–û–¢–ß–ò–ö –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô
async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–Ω–æ–ø–æ–∫)"""
    user = update.effective_user
    
    if is_in_admin_mode(user.id):
        await handle_admin_message(update, context)
        return
        
    text = update.message.text
    
    if text == "üé§ –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å":
        await update.message.reply_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞—É–¥–∏–æ—Ñ–∞–π–ª, –≤–∏–¥–µ–æ –∏–ª–∏ –∫—Ä—É–∂–æ—á–µ–∫ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è! üé§",
            reply_markup=config.MAIN_MENU
        )
    elif text == "üóÉÔ∏è –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞":
        await batch_command(update, context)
    elif text == "üîä –û–∑–≤—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç":
        await voice_command(update, context)
    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await stats_command(update, context)
    elif text == "‚ùì –ü–æ–º–æ—â—å":
        await help_command(update, context)
    elif text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        await settings_command(update, context)
    elif text == "üåç –Ø–∑—ã–∫":
        await language_command(update, context)
    elif text == "üá∑üá∫ –†—É—Å—Å–∫–∏–π":
        user_languages[user.id] = 'ru'
        await update.message.reply_text(
            "‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π\n"
            "–¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç –ª—É—á—à–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å —Ä—É—Å—Å–∫—É—é —Ä–µ—á—å!",
            reply_markup=config.MAIN_MENU
        )
    elif text == "üá∫üá∏ English":
        user_languages[user.id] = 'en'
        await update.message.reply_text(
            "‚úÖ Language changed to English\n"
            "The bot will now better recognize English speech!",
            reply_markup=config.MAIN_MENU
        )
    elif text == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text(
            "üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=config.MAIN_MENU
        )
    else:
        await update.message.reply_text(
            "–ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=config.MAIN_MENU
        )

# –û–ë–†–ê–ë–û–¢–ß–ò–ö –ê–£–î–ò–û
async def handle_audio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤"""
    user = update.effective_user
    
    if is_in_admin_mode(user.id):
        await update.message.reply_text(
            "‚ùå –í —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.\n"
            "–ù–∞–∂–º–∏—Ç–µ 'üîô –ù–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º.",
            reply_markup=config.ADMIN_MENU
        )
        return

    if not recognizer:
        error_msg = "–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å Vosk –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
        log_error("Vosk not initialized", error_msg, update)
        await update.message.reply_text("‚ùå –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
        return

    if update.message.voice:
        audio_file = update.message.voice
        file_type = "–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    elif update.message.audio:
        audio_file = update.message.audio
        file_type = "–∞—É–¥–∏–æ—Ñ–∞–π–ª"
    else:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª")
        return
    
    if audio_file.file_size > config.MAX_FILE_SIZE:
        await update.message.reply_text(f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {config.MAX_FILE_SIZE // (1024*1024)} –ú–ë")
        return
    
    user_language = get_user_language(user.id)
    enhancement_group = ab_testing.assign_group(user.id, "text_enhancement_method")
    
    processing_msg = await update.message.reply_text(
        f"‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {file_type}...\n"
        f"üìè –†–∞–∑–º–µ—Ä: {audio_file.file_size // 1024} –ö–ë\n"
        f"üåç –Ø–∑—ã–∫: {user_language.upper()}\n"
        "–≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è..."
    )
    
    temp_audio_path = None
    request_id = None
    
    try:
        telegram_file = await audio_file.get_file()
        temp_audio_path = await AudioProcessor.process_telegram_audio(telegram_file)
        
        if not temp_audio_path:
            await processing_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ")
            return
        
        cached_result = None
        if config.CACHE_ENABLED:
            cached_result = cache_manager.get(temp_audio_path, user_language)
        
        if cached_result:
            recognized_text = cached_result
            logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        else:
            task_id = f"{user.id}_{datetime.now().timestamp()}"
            recognized_text = await processing_queue.add_task(
                task_id, 
                recognizer.recognize_audio, 
                temp_audio_path, 
                user_language
            )
            
            if config.CACHE_ENABLED and recognized_text and "–û—à–∏–±–∫–∞" not in recognized_text:
                cache_manager.set(temp_audio_path, user_language, recognized_text)
        
        duration = AudioProcessor.get_audio_duration(temp_audio_path)
        
        final_text = recognized_text
        if recognized_text and "–û—à–∏–±–∫–∞" not in recognized_text and "–ù–µ —É–¥–∞–ª–æ—Å—å" not in recognized_text:
            try:
                if enhancement_group == "enhancer_v1":
                    final_text = text_enhancer.enhance_text(recognized_text, [])
                elif enhancement_group == "enhancer_v2":
                    plugin_result = plugin_system.process_text(recognized_text)
                    final_text = plugin_result['text']
                else:
                    final_text = recognized_text
                
                logger.info(f"‚úÖ –¢–µ–∫—Å—Ç —É–ª—É—á—à–µ–Ω –º–µ—Ç–æ–¥–æ–º: {enhancement_group}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e}")
                final_text = recognized_text
        
        request_id = db.add_audio_request(user.id, audio_file.file_id, audio_file.file_size, duration, final_text)
        
        if final_text and "–û—à–∏–±–∫–∞" not in final_text and "–ù–µ —É–¥–∞–ª–æ—Å—å" not in final_text:
            response_text = (
                f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!\n"
                f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.1f} —Å–µ–∫\n"
                f"üß™ –ú–µ—Ç–æ–¥: {enhancement_group}\n"
                f"üìù –¢–µ–∫—Å—Ç:\n\n{final_text}"
            )
            
            feedback_keyboard = {
                "inline_keyboard": [[
                    {"text": "üëç –•–æ—Ä–æ—à–æ", "callback_data": f"feedback_{request_id}_5"},
                    {"text": "üëé –ü–ª–æ—Ö–æ", "callback_data": f"feedback_{request_id}_1"}
                ]]
            }
            
            if len(response_text) > 4000:
                parts = [response_text[i:i+4000] for i in range(0, len(response_text), 4000)]
                for i, part in enumerate(parts):
                    if i == len(parts) - 1:
                        await update.message.reply_text(part, reply_markup=feedback_keyboard)
                    else:
                        await update.message.reply_text(part)
            else:
                await update.message.reply_text(response_text, reply_markup=feedback_keyboard)
            
            ab_testing.track_result(
                "text_enhancement_method",
                user.id,
                enhancement_group,
                success=True,
                metrics={
                    'original_length': len(recognized_text),
                    'enhanced_length': len(final_text),
                    'duration': duration
                }
            )
            
        else:
            error_response = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –≤ –±–æ–ª–µ–µ —Ç–∏—Ö–æ–º –º–µ—Å—Ç–µ."
            await update.message.reply_text(error_response)
            
            ab_testing.track_result(
                "text_enhancement_method",
                user.id,
                enhancement_group,
                success=False
            )
    
    except Exception as e:
        error_msg = log_error("Audio processing error", e, update)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ.")
        
        ab_testing.track_result(
            "text_enhancement_method",
            user.id,
            enhancement_group,
            success=False
        )
    
    finally:
        if temp_audio_path and os.path.exists(temp_audio_path):
            try:
                os.remove(temp_audio_path)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
        
        try:
            await processing_msg.delete()
        except:
            pass
        
        torch.cuda.empty_cache() if torch.cuda.is_available() else None
        gc.collect()

# –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–ë–†–ê–¢–ù–û–ô –°–í–Ø–ó–ò
async def handle_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    if data.startswith('feedback_'):
        parts = data.split('_')
        if len(parts) == 3:
            request_id = parts[1]
            rating = int(parts[2])
            
            db.add_feedback(request_id, rating)
            
            if rating >= 4:
                await query.edit_message_text(
                    query.message.text + "\n\n‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É!"
                )
            else:
                await query.edit_message_text(
                    query.message.text + "\n\nüòî –°–æ–∂–∞–ª–µ–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞—Å –Ω–µ —É—Å—Ç—Ä–æ–∏–ª. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏–µ–º –∫–∞—á–µ—Å—Ç–≤–∞!"
                )

# –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê –ë–û–¢–ê
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        if not check_system_requirements():
            logger.warning("‚ö†Ô∏è  –ó–∞–ø—É—Å–∫ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –æ—à–∏–±–∫–∞–º")
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        
        db.init_db()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –≤ event loop
        loop.run_until_complete(start_services())
        
        application = Application.builder().token(config.TELEGRAM_BOT_TOKEN).build()
        
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("stats", stats_command))
        application.add_handler(CommandHandler("settings", settings_command))
        application.add_handler(CommandHandler("language", language_command))
        application.add_handler(CommandHandler("admin", admin_command))
        application.add_handler(CommandHandler("batch", batch_command))
        application.add_handler(CommandHandler("voice", voice_command))
        
        application.add_handler(MessageHandler(filters.VOICE | filters.AUDIO, handle_audio))
        application.add_handler(MessageHandler(filters.VIDEO, handle_video))
        application.add_handler(MessageHandler(filters.VIDEO_NOTE, handle_video_note))
        
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
        application.add_handler(CallbackQueryHandler(handle_feedback, pattern="^feedback_"))
        
        application.add_error_handler(error_handler)
        
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ event loop
        loop.run_until_complete(application.run_polling())
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        raise

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")