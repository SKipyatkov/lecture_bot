import os
import logging
import zipfile
import shutil
from datetime import datetime, timedelta
from typing import List, Dict, Optional
import threading
import time
import sqlite3

logger = logging.getLogger(__name__)

class BackupService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞"""
    
    def __init__(self, backup_dir: str = "backups", retention_days: int = 7):
        self.backup_dir = backup_dir
        self.retention_days = retention_days
        self.is_running = False
        self.thread = None
        
        os.makedirs(backup_dir, exist_ok=True)
        logger.info(f"‚úÖ –°–µ—Ä–≤–∏—Å –±—ç–∫–∞–ø–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {backup_dir}")
    
    def create_backup(self, comment: str = None) -> Optional[str]:
        """
        –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É backup-—Ñ–∞–π–ª—É
        """
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_name = f"backup_{timestamp}"
            if comment:
                backup_name += f"_{comment.replace(' ', '_')}"
            backup_name += ".zip"
            
            backup_path = os.path.join(self.backup_dir, backup_name)
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–∞
            temp_dir = os.path.join(self.backup_dir, f"temp_{timestamp}")
            os.makedirs(temp_dir, exist_ok=True)
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –±—ç–∫–∞–ø–∞
            files_to_backup = self._collect_files_for_backup(temp_dir)
            
            # –°–æ–∑–¥–∞–µ–º ZIP –∞—Ä—Ö–∏–≤
            with zipfile.ZipFile(backup_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
                for file_path, arcname in files_to_backup:
                    if os.path.exists(file_path):
                        zipf.write(file_path, arcname)
                        logger.debug(f"üì¶ –î–æ–±–∞–≤–ª–µ–Ω –≤ –±—ç–∫–∞–ø: {file_path}")
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            shutil.rmtree(temp_dir)
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã
            self._clean_old_backups()
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—ç–∫–∞–ø–µ
            backup_info = {
                'filename': backup_name,
                'path': backup_path,
                'size': os.path.getsize(backup_path),
                'created_at': datetime.now().isoformat(),
                'comment': comment,
                'file_count': len(files_to_backup)
            }
            
            self._save_backup_info(backup_info)
            
            size_mb = backup_info['size'] / (1024 * 1024)
            logger.info(f"‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {backup_name} ({size_mb:.1f} –ú–ë, {len(files_to_backup)} —Ñ–∞–π–ª–æ–≤)")
            
            return backup_path
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")
            # –û—á–∏—Å—Ç–∫–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            if 'temp_dir' in locals() and os.path.exists(temp_dir):
                shutil.rmtree(temp_dir)
            return None
    
    def _collect_files_for_backup(self, temp_dir: str) -> List[tuple]:
        """–°–æ–±–∏—Ä–∞–µ—Ç —Ñ–∞–π–ª—ã –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
        files_to_backup = []
        
        # 1. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        db_files = [
            'bot_database.db',
            'bot_database.db-shm',
            'bot_database.db-wal'
        ]
        
        for db_file in db_files:
            if os.path.exists(db_file):
                files_to_backup.append((db_file, f"database/{db_file}"))
        
        # 2. –§–∞–π–ª—ã –ª–æ–≥–æ–≤ (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å)
        log_files = [f for f in os.listdir('.') if f.startswith('bot_log_') and f.endswith('.log')]
        today_log = f"bot_log_{datetime.now().strftime('%Y%m%d')}.log"
        
        for log_file in log_files:
            if log_file == today_log:  # –ë–µ–∫–∞–ø–∏–º —Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –ª–æ–≥
                files_to_backup.append((log_file, f"logs/{log_file}"))
        
        # 3. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        config_files = ['.env', 'config.py', 'requirements.txt']
        
        for config_file in config_files:
            if os.path.exists(config_file):
                files_to_backup.append((config_file, f"config/{config_file}"))
        
        # 4. –°–æ–∑–¥–∞–µ–º –¥–∞–º–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ SQL
        db_dump_path = self._create_database_dump(temp_dir)
        if db_dump_path:
            files_to_backup.append((db_dump_path, "database/database_dump.sql"))
        
        # 5. –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∏—Å—Ç–µ–º–µ
        system_info_path = self._create_system_info(temp_dir)
        if system_info_path:
            files_to_backup.append((system_info_path, "system_info.txt"))
        
        return files_to_backup
    
    def _create_database_dump(self, temp_dir: str) -> Optional[str]:
        """–°–æ–∑–¥–∞–µ—Ç SQL –¥–∞–º–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            dump_path = os.path.join(temp_dir, "database_dump.sql")
            
            if not os.path.exists('bot_database.db'):
                return None
            
            conn = sqlite3.connect('bot_database.db')
            
            with open(dump_path, 'w', encoding='utf-8') as f:
                for line in conn.iterdump():
                    f.write(f"{line}\n")
            
            conn.close()
            return dump_path
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–º–ø–∞ –ë–î: {e}")
            return None
    
    def _create_system_info(self, temp_dir: str) -> Optional[str]:
        """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∏—Å—Ç–µ–º–µ"""
        try:
            info_path = os.path.join(temp_dir, "system_info.txt")
            
            with open(info_path, 'w', encoding='utf-8') as f:
                f.write(f"Backup created: {datetime.now()}\n")
                f.write(f"Python version: {os.sys.version}\n")
                f.write(f"Platform: {os.sys.platform}\n")
                f.write(f"Working directory: {os.getcwd()}\n")
                f.write(f"User: {os.getenv('USER', 'Unknown')}\n")
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
                f.write("\n=== File System ===\n")
                for item in os.listdir('.'):
                    if os.path.isfile(item):
                        size = os.path.getsize(item)
                        f.write(f"{item}: {size} bytes\n")
            
            return info_path
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
            return None
    
    def _save_backup_info(self, backup_info: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—ç–∫–∞–ø–µ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª"""
        try:
            info_file = os.path.join(self.backup_dir, "backups_info.json")
            
            import json
            backups = []
            
            if os.path.exists(info_file):
                with open(info_file, 'r', encoding='utf-8') as f:
                    backups = json.load(f)
            
            backups.append(backup_info)
            
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –∑–∞–ø–∏—Å–µ–π
            if len(backups) > 50:
                backups = backups[-50:]
            
            with open(info_file, 'w', encoding='utf-8') as f:
                json.dump(backups, f, ensure_ascii=False, indent=2)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±—ç–∫–∞–ø–µ: {e}")
    
    def _clean_old_backups(self):
        """–£–¥–∞–ª—è–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏"""
        try:
            cutoff_time = datetime.now() - timedelta(days=self.retention_days)
            deleted_count = 0
            
            for filename in os.listdir(self.backup_dir):
                if filename.startswith('backup_') and filename.endswith('.zip'):
                    file_path = os.path.join(self.backup_dir, filename)
                    file_time = datetime.fromtimestamp(os.path.getctime(file_path))
                    
                    if file_time < cutoff_time:
                        os.remove(file_path)
                        deleted_count += 1
                        logger.debug(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –±—ç–∫–∞–ø: {filename}")
            
            if deleted_count > 0:
                logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –±—ç–∫–∞–ø–æ–≤: {deleted_count}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤: {e}")
    
    def restore_backup(self, backup_path: str) -> bool:
        """
        –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ backup-—Ñ–∞–π–ª–∞
        """
        if not os.path.exists(backup_path):
            logger.error(f"–§–∞–π–ª –±—ç–∫–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {backup_path}")
            return False
        
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            temp_dir = os.path.join(self.backup_dir, f"restore_{datetime.now().strftime('%H%M%S')}")
            os.makedirs(temp_dir, exist_ok=True)
            
            # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤
            with zipfile.ZipFile(backup_path, 'r') as zipf:
                zipf.extractall(temp_dir)
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã
            self._restore_files_from_backup(temp_dir)
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            shutil.rmtree(temp_dir)
            
            logger.info(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {os.path.basename(backup_path)}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –±—ç–∫–∞–ø–∞: {e}")
            if 'temp_dir' in locals() and os.path.exists(temp_dir):
                shutil.rmtree(temp_dir)
            return False
    
    def _restore_files_from_backup(self, temp_dir: str):
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –∏–∑ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞"""
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db_source = os.path.join(temp_dir, "database", "bot_database.db")
        if os.path.exists(db_source):
            # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø —Ç–µ–∫—É—â–µ–π –ë–î –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            current_db = 'bot_database.db'
            if os.path.exists(current_db):
                backup_name = f"pre_restore_{datetime.now().strftime('%H%M%S')}.db"
                shutil.copy2(current_db, backup_name)
                logger.info(f"üíæ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø —Ç–µ–∫—É—â–µ–π –ë–î: {backup_name}")
            
            shutil.copy2(db_source, current_db)
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        config_dir = os.path.join(temp_dir, "config")
        if os.path.exists(config_dir):
            for config_file in os.listdir(config_dir):
                source = os.path.join(config_dir, config_file)
                if os.path.isfile(source):
                    shutil.copy2(source, ".")
                    logger.info(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ–Ω—Ñ–∏–≥: {config_file}")
    
    def start_auto_backup(self, interval_hours: int = 24):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        if self.is_running:
            logger.warning("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ")
            return
        
        self.is_running = True
        
        def backup_loop():
            while self.is_running:
                try:
                    # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
                    comment = f"auto_{datetime.now().strftime('%H%M')}"
                    self.create_backup(comment)
                    
                    # –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤
                    for _ in range(interval_hours * 60):
                        if not self.is_running:
                            break
                        time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –±—ç–∫–∞–ø–µ: {e}")
                    time.sleep(300)  # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
        
        self.thread = threading.Thread(target=backup_loop, daemon=True)
        self.thread.start()
        
        logger.info(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval_hours}—á)")
    
    def stop_auto_backup(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        self.is_running = False
        if self.thread:
            self.thread.join(timeout=5)
        logger.info("‚èπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    def get_backup_info(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏—è—Ö"""
        try:
            backups = []
            total_size = 0
            
            for filename in os.listdir(self.backup_dir):
                if filename.startswith('backup_') and filename.endswith('.zip'):
                    file_path = os.path.join(self.backup_dir, filename)
                    stat = os.stat(file_path)
                    
                    backups.append({
                        'name': filename,
                        'size_mb': round(stat.st_size / (1024 * 1024), 2),
                        'created': datetime.fromtimestamp(stat.st_mtime).strftime('%Y-%m-%d %H:%M:%S'),
                        'path': file_path
                    })
                    total_size += stat.st_size
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
            backups.sort(key=lambda x: x['created'], reverse=True)
            
            return {
                'backup_dir': self.backup_dir,
                'total_backups': len(backups),
                'total_size_mb': round(total_size / (1024 * 1024), 2),
                'retention_days': self.retention_days,
                'auto_backup_running': self.is_running,
                'backups': backups[:10]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –±—ç–∫–∞–ø–æ–≤
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±—ç–∫–∞–ø–∞—Ö: {e}")
            return {'error': str(e)}
    
    def get_backup_size_info(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—Ä–∞—Ö –±—ç–∫–∞–ø–æ–≤"""
        try:
            size_by_date = {}
            
            for filename in os.listdir(self.backup_dir):
                if filename.startswith('backup_') and filename.endswith('.zip'):
                    file_path = os.path.join(self.backup_dir, filename)
                    date_str = datetime.fromtimestamp(os.path.getctime(file_path)).strftime('%Y-%m-%d')
                    size_mb = os.path.getsize(file_path) / (1024 * 1024)
                    
                    if date_str not in size_by_date:
                        size_by_date[date_str] = 0
                    size_by_date[date_str] += size_mb
            
            return {
                'size_by_date': size_by_date,
                'total_backups': len([f for f in os.listdir(self.backup_dir) 
                                    if f.startswith('backup_') and f.endswith('.zip')]),
                'total_size_mb': sum(size_by_date.values())
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–∑–º–µ—Ä–∞—Ö: {e}")
            return {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –±—ç–∫–∞–ø–æ–≤
backup_service = BackupService()