import logging
import random
import hashlib
from typing import Dict, List, Any, Optional
from datetime import datetime, timedelta
import json

logger = logging.getLogger(__name__)

class ABTesting:
    """
    –°–∏—Å—Ç–µ–º–∞ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    –∏ —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
    """
    
    def __init__(self):
        self.experiments: Dict[str, Dict] = {}
        self.user_assignments: Dict[str, Dict[str, str]] = {}  # user_id -> {experiment: group}
        self.results: Dict[str, List[Dict]] = {}  # experiment -> list of results
        self.metrics: Dict[str, List] = {}  # experiment -> list of metrics
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã
        self._setup_default_experiments()
        
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def _setup_default_experiments(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        # –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –º–µ—Ç–æ–¥–æ–≤ —É–ª—É—á—à–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        self.create_experiment(
            experiment_id="text_enhancement_method",
            groups=["enhancer_v1", "enhancer_v2", "control"],
            description="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ —É–ª—É—á—à–µ–Ω–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞",
            weights=[40, 40, 20]  # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≥—Ä—É–ø–ø–∞–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        )
        
        # –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –º–µ—Ç–æ–¥–æ–≤ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏
        self.create_experiment(
            experiment_id="voice_synthesis_method", 
            groups=["espeak_standard", "espeak_enhanced", "control"],
            description="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏",
            weights=[50, 30, 20]
        )
        
        # –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ
        self.create_experiment(
            experiment_id="audio_processing_pipeline",
            groups=["pipeline_v1", "pipeline_v2"],
            description="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ",
            weights=[50, 50]
        )
    
    def create_experiment(self, experiment_id: str, groups: List[str], 
                         description: str = "", weights: List[int] = None):
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        if experiment_id in self.experiments:
            logger.warning(f"–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç {experiment_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ—Å–∞
        if weights is None:
            weights = [100 // len(groups)] * len(groups)
        
        if len(weights) != len(groups):
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—Å–æ–≤ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥—Ä—É–ø–ø")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ—Å–∞ –∫ 100%
        total_weight = sum(weights)
        normalized_weights = [int(w * 100 / total_weight) for w in weights]
        
        self.experiments[experiment_id] = {
            'groups': groups,
            'weights': normalized_weights,
            'description': description,
            'created_at': datetime.now(),
            'is_active': True,
            'total_participants': 0,
            'group_stats': {group: 0 for group in groups}
        }
        
        self.results[experiment_id] = []
        self.metrics[experiment_id] = []
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç: {experiment_id} - {description}")
        logger.info(f"   –ì—Ä—É–ø–ø—ã: {groups} —Å –≤–µ—Å–∞–º–∏: {normalized_weights}")
    
    def assign_group(self, user_id: int, experiment_id: str) -> str:
        """
        –ù–∞–∑–Ω–∞—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ user_id
        """
        if experiment_id not in self.experiments:
            logger.error(f"–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç {experiment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return 'control'
        
        experiment = self.experiments[experiment_id]
        
        if not experiment['is_active']:
            return 'control'
        
        user_key = str(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_key not in self.user_assignments:
            self.user_assignments[user_key] = {}
        
        if experiment_id in self.user_assignments[user_key]:
            return self.user_assignments[user_key][experiment_id]
        
        # –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ user_id
        random.seed(int(hashlib.md5(f"{user_id}_{experiment_id}".encode()).hexdigest(), 16))
        
        # –í—ã–±–∏—Ä–∞–µ–º –≥—Ä—É–ø–ø—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Å–æ–≤
        groups = experiment['groups']
        weights = experiment['weights']
        
        # –°–æ–∑–¥–∞–µ–º –≤–∑–≤–µ—à–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
        total = sum(weights)
        r = random.randint(1, total)
        
        current = 0
        for i, weight in enumerate(weights):
            current += weight
            if r <= current:
                group = groups[i]
                break
        else:
            group = groups[-1]  # fallback
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
        self.user_assignments[user_key][experiment_id] = group
        experiment['total_participants'] += 1
        experiment['group_stats'][group] += 1
        
        logger.debug(f"üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –≤ –≥—Ä—É–ø–ø—É {group} —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ {experiment_id}")
        
        return group
    
    def track_result(self, experiment_id: str, user_id: int, group: str, 
                    success: bool, metrics: Dict[str, Any] = None):
        """
        –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if experiment_id not in self.experiments:
            logger.error(f"–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç {experiment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        result = {
            'user_id': user_id,
            'group': group,
            'success': success,
            'metrics': metrics or {},
            'timestamp': datetime.now(),
            'experiment_id': experiment_id
        }
        
        self.results[experiment_id].append(result)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        if metrics:
            metric_record = {
                'user_id': user_id,
                'group': group,
                'timestamp': datetime.now(),
                **metrics
            }
            self.metrics[experiment_id].append(metric_record)
        
        logger.debug(f"üìä –ó–∞–ø–∏—Å–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ {experiment_id}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, –≥—Ä—É–ø–ø–∞ {group}")
    
    def get_experiment_stats(self, experiment_id: str) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—É
        """
        if experiment_id not in self.experiments:
            return {'error': 'Experiment not found'}
        
        experiment = self.experiments[experiment_id]
        results = self.results.get(experiment_id, [])
        
        if not results:
            return {
                'experiment_id': experiment_id,
                'description': experiment['description'],
                'total_participants': experiment['total_participants'],
                'groups': experiment['groups'],
                'group_distribution': experiment['group_stats'],
                'total_results': 0,
                'message': 'No results yet'
            }
        
        stats = {
            'experiment_id': experiment_id,
            'description': experiment['description'],
            'total_participants': experiment['total_participants'],
            'groups': experiment['groups'],
            'group_distribution': experiment['group_stats'],
            'total_results': len(results),
            'groups': {}
        }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º
        for group in experiment['groups']:
            group_results = [r for r in results if r['group'] == group]
            group_metrics = [m for m in self.metrics.get(experiment_id, []) if m['group'] == group]
            
            if not group_results:
                stats['groups'][group] = {
                    'total': 0,
                    'successful': 0,
                    'success_rate': 0,
                    'metrics': {}
                }
                continue
            
            successful = len([r for r in group_results if r['success']])
            success_rate = successful / len(group_results) if group_results else 0
            
            # –ê–Ω–∞–ª–∏–∑ –º–µ—Ç—Ä–∏–∫
            metrics_analysis = {}
            if group_metrics:
                for metric_name in group_metrics[0].keys():
                    if metric_name not in ['user_id', 'group', 'timestamp']:
                        values = [m[metric_name] for m in group_metrics if metric_name in m]
                        if values:
                            metrics_analysis[metric_name] = {
                                'count': len(values),
                                'avg': sum(values) / len(values),
                                'min': min(values),
                                'max': max(values)
                            }
            
            stats['groups'][group] = {
                'total': len(group_results),
                'successful': successful,
                'success_rate': round(success_rate * 100, 2),
                'metrics': metrics_analysis
            }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å (–ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è)
        if len(experiment['groups']) == 2:
            stats['significance'] = self._calculate_significance(stats)
        
        return stats
    
    def _calculate_significance(self, stats: Dict) -> Dict:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫—É—é –∑–Ω–∞—á–∏–º–æ—Å—Ç—å —Ä–∞–∑–ª–∏—á–∏–π –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏"""
        try:
            groups = list(stats['groups'].keys())
            if len(groups) != 2:
                return {}
            
            group_a, group_b = groups
            stats_a = stats['groups'][group_a]
            stats_b = stats['groups'][group_b]
            
            # –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç confidence interval
            n1, n2 = stats_a['total'], stats_b['total']
            p1, p2 = stats_a['success_rate'] / 100, stats_b['success_rate'] / 100
            
            if n1 == 0 or n2 == 0:
                return {}
            
            # Standard error
            se = (p1 * (1 - p1) / n1 + p2 * (1 - p2) / n2) ** 0.5
            
            # Z-score –¥–ª—è 95% confidence
            z_score = 1.96
            margin = z_score * se
            
            # Difference and confidence interval
            diff = p1 - p2
            ci_lower = diff - margin
            ci_upper = diff + margin
            
            # Is significant?
            is_significant = (ci_lower > 0 or ci_upper < 0) and margin < abs(diff)
            
            return {
                'difference_percent': round(diff * 100, 2),
                'confidence_interval': [round(ci_lower * 100, 2), round(ci_upper * 100, 2)],
                'is_significant': is_significant,
                'confidence_level': 95
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏: {e}")
            return {}
    
    def get_user_experiments(self, user_id: int) -> Dict[str, str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_key = str(user_id)
        return self.user_assignments.get(user_key, {})
    
    def stop_experiment(self, experiment_id: str):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç (–ø—Ä–µ–∫—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è)"""
        if experiment_id in self.experiments:
            self.experiments[experiment_id]['is_active'] = False
            logger.info(f"‚èπÔ∏è –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {experiment_id}")
    
    def resume_experiment(self, experiment_id: str):
        """–í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç"""
        if experiment_id in self.experiments:
            self.experiments[experiment_id]['is_active'] = True
            logger.info(f"‚ñ∂Ô∏è –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω: {experiment_id}")
    
    def get_winning_group(self, experiment_id: str, metric: str = 'success_rate') -> Optional[str]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–±–µ–¥–∏–≤—à—É—é –≥—Ä—É–ø–ø—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π –º–µ—Ç—Ä–∏–∫–∏
        """
        stats = self.get_experiment_stats(experiment_id)
        if 'groups' not in stats or not stats['groups']:
            return None
        
        best_group = None
        best_value = -1
        
        for group, group_stats in stats['groups'].items():
            if metric in group_stats:
                value = group_stats[metric]
                if value > best_value:
                    best_value = value
                    best_group = group
            elif metric == 'success_rate':
                value = group_stats.get('success_rate', 0)
                if value > best_value:
                    best_value = value
                    best_group = group
        
        return best_group
    
    def export_data(self, experiment_id: str = None) -> Dict:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤"""
        data = {
            'exported_at': datetime.now().isoformat(),
            'experiments': {},
            'user_assignments': self.user_assignments
        }
        
        if experiment_id:
            if experiment_id in self.experiments:
                data['experiments'][experiment_id] = {
                    'config': self.experiments[experiment_id],
                    'results': self.results.get(experiment_id, []),
                    'metrics': self.metrics.get(experiment_id, [])
                }
        else:
            for exp_id in self.experiments:
                data['experiments'][exp_id] = {
                    'config': self.experiments[exp_id],
                    'results': self.results.get(exp_id, []),
                    'metrics': self.metrics.get(exp_id, [])
                }
        
        return data
    
    def cleanup_old_data(self, max_age_days: int = 30):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤"""
        cutoff_time = datetime.now() - timedelta(days=max_age_days)
        cleaned_count = 0
        
        for experiment_id in list(self.results.keys()):
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            original_count = len(self.results[experiment_id])
            self.results[experiment_id] = [
                r for r in self.results[experiment_id] 
                if r['timestamp'] > cutoff_time
            ]
            cleaned_count += original_count - len(self.results[experiment_id])
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            if experiment_id in self.metrics:
                original_count = len(self.metrics[experiment_id])
                self.metrics[experiment_id] = [
                    m for m in self.metrics[experiment_id]
                    if m['timestamp'] > cutoff_time
                ]
                cleaned_count += original_count - len(self.metrics[experiment_id])
        
        if cleaned_count > 0:
            logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {cleaned_count} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
ab_testing = ABTesting()