import asyncio
import logging
import threading
from concurrent.futures import ThreadPoolExecutor
from queue import Queue, Empty
import time

logger = logging.getLogger(__name__)

class ProcessingQueue:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á"""
    
    def __init__(self, max_workers=2, max_queue_size=10):
        self.max_workers = max_workers
        self.max_queue_size = max_queue_size
        self.task_queue = asyncio.Queue(maxsize=max_queue_size)
        self.results = {}
        self.is_running = False
        self.workers = []
        self.thread_pool = ThreadPoolExecutor(max_workers=max_workers)
        self.loop = None
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –æ—á–µ—Ä–µ–¥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if self.is_running:
            return
            
        self.is_running = True
        self.loop = asyncio.get_event_loop()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º workers
        for i in range(self.max_workers):
            worker = asyncio.create_task(self._worker(f"worker-{i+1}"))
            self.workers.append(worker)
            
        logger.info(f"üöÄ –û—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—É—â–µ–Ω–∞ —Å {self.max_workers} –≤–æ—Ä–∫–µ—Ä–∞–º–∏")
        
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        self.is_running = False
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º workers
        for worker in self.workers:
            worker.cancel()
        
        await asyncio.gather(*self.workers, return_exceptions=True)
        self.workers.clear()
        self.thread_pool.shutdown(wait=True)
        logger.info("‚èπÔ∏è –û—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        
    async def add_task(self, task_id, func, *args, **kwargs):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å"""
        if self.task_queue.qsize() >= self.max_queue_size:
            raise Exception("–û—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞")
            
        # –°–æ–∑–¥–∞–µ–º future –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        future = asyncio.Future()
        self.results[task_id] = future
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
        task_data = {
            'task_id': task_id,
            'func': func,
            'args': args,
            'kwargs': kwargs,
            'future': future
        }
        
        await self.task_queue.put(task_data)
        logger.debug(f"üì• –ó–∞–¥–∞—á–∞ {task_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å")
        
        # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        try:
            result = await future
            return result
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {task_id}: {e}")
            raise
        finally:
            # –£–±–∏—Ä–∞–µ–º –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            self.results.pop(task_id, None)
            
    async def _worker(self, worker_name):
        """–í–æ—Ä–∫–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á"""
        logger.debug(f"üë∑ {worker_name} –∑–∞–ø—É—â–µ–Ω")
        
        while self.is_running:
            try:
                # –ñ–¥–µ–º –∑–∞–¥–∞—á—É —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                try:
                    task_data = await asyncio.wait_for(
                        self.task_queue.get(), 
                        timeout=1.0
                    )
                except asyncio.TimeoutError:
                    continue
                    
                task_id = task_data['task_id']
                func = task_data['func']
                args = task_data['args']
                kwargs = task_data['kwargs']
                future = task_data['future']
                
                logger.debug(f"üéØ {worker_name} –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á—É {task_id}")
                
                try:
                    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ thread pool
                    if asyncio.iscoroutinefunction(func):
                        # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è
                        result = await func(*args, **kwargs)
                    else:
                        # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è
                        result = await self.loop.run_in_executor(
                            self.thread_pool, 
                            func, 
                            *args, 
                            **kwargs
                        )
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    if not future.done():
                        future.set_result(result)
                        
                    logger.debug(f"‚úÖ {worker_name} –∑–∞–≤–µ—Ä—à–∏–ª –∑–∞–¥–∞—á—É {task_id}")
                    
                except Exception as e:
                    logger.error(f"‚ùå {worker_name} –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ {task_id}: {e}")
                    if not future.done():
                        future.set_exception(e)
                        
                finally:
                    # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
                    self.task_queue.task_done()
                    
            except asyncio.CancelledError:
                logger.debug(f"‚èπÔ∏è {worker_name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                break
            except Exception as e:
                logger.error(f"‚ùå {worker_name} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
                continue
                
    def get_queue_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–µ—Ä–µ–¥–∏"""
        return {
            'queue_size': self.task_queue.qsize(),
            'max_queue_size': self.max_queue_size,
            'active_tasks': len([f for f in self.results.values() if not f.done()]),
            'workers': len(self.workers)
        }
        
    async def wait_for_completion(self):
        """–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á"""
        await self.task_queue.join()
        
    def cancel_task(self, task_id):
        """–û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á–∏"""
        if task_id in self.results:
            future = self.results[task_id]
            if not future.done():
                future.cancel()
                logger.info(f"‚ùå –ó–∞–¥–∞—á–∞ {task_id} –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return True
        return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ—á–µ—Ä–µ–¥–∏
processing_queue = ProcessingQueue()