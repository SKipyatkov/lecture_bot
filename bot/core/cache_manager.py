import hashlib
import os
import pickle
import logging
from typing import Any, Optional, Dict
from datetime import datetime, timedelta
import shutil

logger = logging.getLogger(__name__)

class CacheManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"""
    
    def __init__(self, cache_dir: str = "cache", ttl_hours: int = 24, max_size_mb: int = 500):
        self.cache_dir = cache_dir
        self.ttl = timedelta(hours=ttl_hours)
        self.max_size_mb = max_size_mb
        os.makedirs(cache_dir, exist_ok=True)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.hits = 0
        self.misses = 0
        self.writes = 0
    
    def _get_file_hash(self, file_path: str) -> str:
        """–í—ã—á–∏—Å–ª—è–µ—Ç MD5 —Ö–µ—à —Ñ–∞–π–ª–∞"""
        hasher = hashlib.md5()
        try:
            with open(file_path, 'rb') as f:
                for chunk in iter(lambda: f.read(4096), b""):
                    hasher.update(chunk)
            return hasher.hexdigest()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ö–µ—à–∞ —Ñ–∞–π–ª–∞ {file_path}: {e}")
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–º–µ—Ä –∏ –≤—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
            stat = os.stat(file_path)
            return hashlib.md5(f"{file_path}_{stat.st_size}_{stat.st_mtime}".encode()).hexdigest()
    
    def _get_cache_path(self, file_hash: str, language: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫—ç—à–∞"""
        return os.path.join(self.cache_dir, f"{file_hash}_{language}.cache")
    
    def get(self, file_path: str, language: str) -> Optional[Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –∫—ç—à–∞"""
        try:
            if not os.path.exists(file_path):
                self.misses += 1
                return None
            
            file_hash = self._get_file_hash(file_path)
            cache_path = self._get_cache_path(file_hash, language)
            
            if not os.path.exists(cache_path):
                self.misses += 1
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL
            cache_mtime = datetime.fromtimestamp(os.path.getmtime(cache_path))
            if datetime.now() - cache_mtime > self.ttl:
                os.remove(cache_path)
                self.misses += 1
                return None
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
            with open(cache_path, 'rb') as f:
                result = pickle.load(f)
            
            self.hits += 1
            logger.debug(f"‚úÖ Cache hit for {file_hash}")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå Cache get error: {e}")
            self.misses += 1
            return None
    
    def set(self, file_path: str, language: str, result: Any) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫—ç—à"""
        try:
            if not os.path.exists(file_path):
                return False
            
            file_hash = self._get_file_hash(file_path)
            cache_path = self._get_cache_path(file_hash, language)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é
            if self._get_cache_size_mb() >= self.max_size_mb:
                self._cleanup_oldest_files(10)  # –£–¥–∞–ª—è–µ–º 10 —Å–∞–º—ã—Ö —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à
            with open(cache_path, 'wb') as f:
                pickle.dump(result, f)
            
            self.writes += 1
            logger.debug(f"üíæ Cache set for {file_hash}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Cache set error: {e}")
            return False
    
    def _get_cache_size_mb(self) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞ –≤ –º–µ–≥–∞–±–∞–π—Ç–∞—Ö"""
        total_size = 0
        try:
            for filename in os.listdir(self.cache_dir):
                if filename.endswith('.cache'):
                    file_path = os.path.join(self.cache_dir, filename)
                    total_size += os.path.getsize(file_path)
            return total_size / (1024 * 1024)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∫—ç—à–∞: {e}")
            return 0
    
    def _cleanup_oldest_files(self, count: int = 10):
        """–£–¥–∞–ª—è–µ—Ç —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –∏–∑ –∫—ç—à–∞"""
        try:
            cache_files = []
            for filename in os.listdir(self.cache_dir):
                if filename.endswith('.cache'):
                    file_path = os.path.join(self.cache_dir, filename)
                    mtime = os.path.getmtime(file_path)
                    cache_files.append((file_path, mtime))
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è (—Å—Ç–∞—Ä—ã–µ —Å–Ω–∞—á–∞–ª–∞)
            cache_files.sort(key=lambda x: x[1])
            
            # –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
            for file_path, _ in cache_files[:count]:
                try:
                    os.remove(file_path)
                    logger.debug(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –∫—ç—à-—Ñ–∞–π–ª: {os.path.basename(file_path)}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫—ç—à-—Ñ–∞–π–ª–∞ {file_path}: {e}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}")
    
    def clear_old_cache(self) -> int:
        """–û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∫—ç—à-—Ñ–∞–π–ª—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö"""
        deleted_count = 0
        cutoff_time = datetime.now() - self.ttl
        
        try:
            for filename in os.listdir(self.cache_dir):
                if filename.endswith('.cache'):
                    file_path = os.path.join(self.cache_dir, filename)
                    file_mtime = datetime.fromtimestamp(os.path.getmtime(file_path))
                    
                    if file_mtime < cutoff_time:
                        try:
                            os.remove(file_path)
                            deleted_count += 1
                            logger.debug(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à: {filename}")
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {file_path}: {e}")
                            
            if deleted_count > 0:
                logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∫—ç—à-—Ñ–∞–π–ª–æ–≤: {deleted_count}")
                
        except Exception as e:
            logger.error(f"‚ùå Cache cleanup error: {e}")
        
        return deleted_count
    
    def clear_all_cache(self) -> int:
        """–û—á–∏—â–∞–µ—Ç –≤–µ—Å—å –∫—ç—à –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        deleted_count = 0
        try:
            for filename in os.listdir(self.cache_dir):
                if filename.endswith('.cache'):
                    file_path = os.path.join(self.cache_dir, filename)
                    try:
                        os.remove(file_path)
                        deleted_count += 1
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {file_path}: {e}")
            
            logger.info(f"üßπ –û—á–∏—â–µ–Ω –≤–µ—Å—å –∫—ç—à: {deleted_count} —Ñ–∞–π–ª–æ–≤")
            self.hits = 0
            self.misses = 0
            self.writes = 0
            
        except Exception as e:
            logger.error(f"‚ùå Clear all cache error: {e}")
        
        return deleted_count
    
    def get_cache_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞"""
        try:
            files = [f for f in os.listdir(self.cache_dir) if f.endswith('.cache')]
            total_size = sum(os.path.getsize(os.path.join(self.cache_dir, f)) for f in files)
            
            hit_rate = 0
            if self.hits + self.misses > 0:
                hit_rate = self.hits / (self.hits + self.misses) * 100
            
            return {
                'total_files': len(files),
                'total_size_mb': round(total_size / (1024 * 1024), 2),
                'max_size_mb': self.max_size_mb,
                'hits': self.hits,
                'misses': self.misses,
                'writes': self.writes,
                'hit_rate_percent': round(hit_rate, 1),
                'cache_dir': self.cache_dir,
                'ttl_hours': self.ttl.total_seconds() / 3600
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞: {e}")
            return {
                'total_files': 0,
                'total_size_mb': 0,
                'max_size_mb': self.max_size_mb,
                'hits': self.hits,
                'misses': self.misses,
                'writes': self.writes,
                'hit_rate_percent': 0,
                'cache_dir': self.cache_dir,
                'ttl_hours': self.ttl.total_seconds() / 3600
            }
    
    def optimize_cache(self):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –∫—ç—à - —É–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç"""
        current_size = self._get_cache_size_mb()
        if current_size > self.max_size_mb:
            files_to_delete = int((current_size - self.max_size_mb) / 10) + 5
            self._cleanup_oldest_files(files_to_delete)
            logger.info(f"üîß –ö—ç—à –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω, —É–¥–∞–ª–µ–Ω–æ ~{files_to_delete} —Ñ–∞–π–ª–æ–≤")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∫—ç—à–∞
cache_manager = CacheManager()